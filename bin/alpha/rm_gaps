#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use BioX::Seq::Stream;
use Getopt::Long;

my $cutoff     = 0.1;
my $min_island = 1;

GetOptions(
    'cutoff=f'  => \$cutoff,
    'min_len=i' => \$min_island,
);

my %old_seqs;
my @ordered;

my $i = BioX::Seq::Stream->new();

my $len;
while (my $obj = $i->next_seq) {
    my $id = $obj->id;
    push @ordered, $id;
    $old_seqs{$id} = $obj->seq;
    my $l = length($obj);
    die "seq length mismatch ($l $len)"
        if (defined $len && length($obj) != $len);
    $len = length($obj);
}

my @islands;
my @curr_island;

POS:
for my $pos (0..$len-1) {
    my $total_count = 0;
    my $gap_count = 0;
    my @bases = map {substr $old_seqs{$_}, $pos, 1} @ordered;
    my $gap_frac = scalar( grep {$_ eq '-' } @bases ) / scalar (@bases);
    if ($gap_frac <= $cutoff) {
        push @curr_island, [@bases];
        next POS;
    }

    # else, if failed cutoff, break current island and skip
    push @islands, [@curr_island] if (scalar @curr_island >= $min_island);
    @curr_island = ();

}

# don't forget to handle final island (if present)!!
push @islands, [@curr_island] if (scalar @curr_island >= $min_island);

# print output
for my $seq (0..$#ordered) {
    print ">$ordered[$seq]\n";
    for my $i (@islands) {
        for my $s (@{ $i }) {
            print $s->[$seq];
        }
    }
    print "\n";
}

