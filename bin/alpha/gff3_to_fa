#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use Getopt::Long;
use Pod::Usage;
use FindBin;
use List::Util qw/any/;

use BioX::Seq::Fetch;

use constant NAME => 'gff3_to_fa';
use constant VERSION => '0.010';

my $transcript_types = qr/^(?:
    mRNA |
    tRNA |
    antisense_lncRNA |
    lnc_RNA |
    transcript_region |
    antisense_RNA |
    snoRNA |
    ncRNA |
    snRNA |
    rRNA
)$/x;

my $fn_fasta;
my $fn_gff3;
my $fn_vcf;
my $output_type;
my $phase_shift = 0;
my $verbose;
my $protein_coding = 0;
my $translate_all = 0;


# Collect command-line parameters
my $err_msg = 'Syntax error: please check your syntax';
pod2usage( -msg => $err_msg, -verbose => 1) if
    ( ! GetOptions(
        'fasta=s'        => \$fn_fasta,
        'gff3=s'         => \$fn_gff3,
        'vcf=s'          => \$fn_vcf,
        'type=s'         => \$output_type,
        'phase_shift'    => \$phase_shift,
        'translate_all'  => \$translate_all,
        'protein_coding' => \$protein_coding,
        'verbose'        => \$verbose,
        'help'           => sub { pod2usage( -verbose => 2 ); },
    )
);

if (! $output_type) {
    warn "No type supplied, defaulting to \"CDS\"\n";
    $output_type = 'CDS';
}

$output_type = lc $output_type;
$protein_coding = 1
    if ($output_type eq 'protein');


die "Can't open GFF file for reading"
    if (! -r $fn_gff3);
die "Can't open FASTA file for reading"
    if (! -r $fn_fasta);
die "Can't open VCF file for reading"
    if (defined $fn_vcf && ! -r $fn_vcf);

my $fai = BioX::Seq::Fetch->new($fn_fasta);

my %struct; #structure in which to keep current chr
my $gene_count = 0;
my $curr_chr;
my %map;

open my $gff3, '<', $fn_gff3;

LINE:
while (my $line = <$gff3>) {
    next LINE if ($line =~ /^#/);    #skip comments
    next LINE if ($line =~ /^\s*$/); #skip blank lines
    chomp $line;
    my (
        $chr,
        $src,
        $type,
        $start,
        $end,
        $score,
        $strand,
        $phase,
        $annot_string
    ) = split "\t", $line;

    process_struct() if (defined $curr_chr && $curr_chr ne $chr);
    $curr_chr = $chr;

    $strand = $strand eq '-' ? -1 : 1; #make strand amenable to arithmetic
    die "start > end" if ($start > $end); #format check
    my %annots;
    for (split /;\s*/, $annot_string) {
        $_ =~ s/\"//g;
        my($tag,$val) = split /\s*=\s*/, $_;
        my @vals = split /\s*,\s*/, $val;
        $annots{$tag} = [@vals];
    }
    for ($type) {
        if (/gene$/) {
            my $id = $annots{ID}->[0];
            if ($protein_coding) {
                my $gtype = $annots{gene_biotype}->[0] // $annots{locus_type}->[0];
                die "No protein-coding information found: "
                  . "cannot filter protein-coding genes only\n"
                    if (! $translate_all && ! defined $gtype);
                $struct{$id}->{protein_coding}
                    = $translate_all ? 1
                    : $gtype eq 'protein_coding' ?  1
                    : 0;
            }
                
            die "missing ID" if (! defined $id);
            ++$gene_count;
            $struct{$id}->{strand} = $strand;
            $struct{$id}->{start}  = $start;
            $struct{$id}->{end}    = $end;
            $struct{$id}->{chr}    = $chr;
        }
        elsif (/^CDS$/) {
            last if ($output_type ne 'cds' && $output_type ne 'protein');

            # CDS can have multiple parents, all of which need to be added to
            my $matched = 0;
            for my $p (@{ $annots{'Parent'} }) {
                my $gene = $map{$p};
                die "Missing gene for $p\n" if (! defined $gene);
                push @{ $struct{$gene}->{transcripts}->{$p}->{cds} },
                    [$start, $end, $phase];
            }
        }
        elsif (/^exon$/) {
            last if ($output_type ne 'transcript');

            # exons can have multiple parents, all of which need to be added to
            my $matched = 0;
            for my $p (@{ $annots{'Parent'} }) {
                my $gene = $map{$p};
                die "Missing gene for $p\n" if (! defined $gene);
                push @{ $struct{$gene}->{transcripts}->{$p}->{exons} },
                    [$start, $end, $phase];
            }
        }
        elsif (/$transcript_types/) {
            last if ($output_type eq 'gene');
            my $id     = $annots{ID}->[0];
            my $parent = $annots{Parent}->[0];
            die "missing ID"     if (! defined $id);

            # ignore non-transcript types
            die "missing parent" if (! defined $parent);
            die "parent struct not found" if (! exists $struct{$parent});

            $struct{$parent}->{transcripts}->{$id}->{cds}   = [];
            $struct{$parent}->{transcripts}->{$id}->{exons} = [];
            $map{$id} = $parent;
        }
    }
}

process_struct() if (%struct); #process last chunk



sub process_struct {

    my $chr_ref = \%struct;
    GENE:
    for my $gene_id (keys %$chr_ref) {
        my $gene_ref = $chr_ref->{$gene_id};
        my $strand = $gene_ref->{strand};
        next GENE if ($protein_coding && ! $gene_ref->{protein_coding});
        if ($output_type eq 'gene') {
            my $seq = $fai->fetch_seq(
                $gene_ref->{chr},
                $gene_ref->{start},
                $gene_ref->{end}
            ) or die "Error fetching $gene_id\n";
            $seq->id = $gene_id;
            $seq->rev_com if ($strand < 0);
            print $seq->as_fasta;
            next GENE;
        }
        my @transcripts = sort {$a cmp $b} keys %{ $gene_ref->{transcripts} };
        TRANSCRIPT:
        for my $t (@transcripts) {
            my $t_ref = $gene_ref->{transcripts}->{$t};
            my $part_type = $output_type eq 'transcript' ? 'exons' : 'cds';
            my @segments = sort {$a->[0] <=> $b->[0]} @{ $t_ref->{$part_type} };
            next TRANSCRIPT if (@segments < 1);
            my $seq = BioX::Seq->new('', $t);
            my $phase;
            for (@segments) {
                $seq .= $fai->fetch_seq(
                    $gene_ref->{chr},
                    $_->[0],
                    $_->[1]
                ) or die "Error fetching $gene_ref->{chr} $_->[0] $_->[1]";
                if ($part_type eq 'cds') {
                    $phase = $_->[2] if (! defined $phase || $strand < 0);
                }
            }
            $seq->rev_com if ($strand < 0);

            if ($output_type eq 'cds') {
                if ($phase_shift) {
                    substr $seq->seq, 0, $phase, ''; 
                }
                else {
                    $seq->desc( "[phase:$phase]" );
                }
            }

            if ($output_type eq 'protein') {
                $seq->translate($phase);
                warn "split protein for $seq->{id}\n" if ($seq =~ /\*(.+)/);
                $seq->{seq} =~ s/\*$// ;   # strip terminal stop codon if present
                $seq->{seq} =~ s/\*/X/g ; # mask internal stop codons if present
            }

            print $seq->as_fasta;
            next TRANSCRIPT;
        }
    }
    %struct = ();
}


__END__

=head1 NAME

gff3_to_fa - extracts sequences in FASTA format given a GFF3 file and reference sequence

=head1 VERSION

This documentation refers to v0.010

=head1 SYNOPSIS

gff3_to_fa [--type I<gene|transcript|cds|protein> --verbose] --fasta I<input_file> --gff I<gff_file>

=head1 DESCRIPTION

B<gff3_to_fa> takes a feature file in GFF3 format and a reference FASTA sequence
and prints out feature sequences in FASTA format. It can be used to extract
gene (unspliced), transcript (spliced), CDS (protein-coding nucleotide) and
protein (translated CDS) sequences from a compliant GFF3 file.

=head1 OPTIONS

=over

=item B<--gff> I<filename>

Specify GFF3 feature file (required)

=item B<--fasta> I<filename>

Specify reference sequence file (required)

=item B<--type> I<string>

Type of sequence to output. Possible values are:
    gene, transcript, CDS, protein (default: CDS)

=item B<--verbose>

Print various extra progress statements

=item B<--help>

Print this documentation

=back

=head1 DIAGNOSTICS

=over

=item B<Can't open <type> file for reading>

This is a general error indicating that the script was unable to read
the input file. Check your filename and syntax.

=item B<missing ID>

Certain feature types are required by the GFF3 standard (and this script)
to have a unique "ID" attribute. This error indicates that the ID was missing
or the attribute field is incorrectly formatted.

=item B<missing parent>

See "Missing ID"

=item B<parent mismatch>

The script requires child features to be grouped under the parent feature in line
order. If a feature is not part of the current gene/transcript, this error is
thrown. Please check your input file and use a "smart" sorting routine to sort
your GFF3 file.

=item B<missing <ID> sequence>

The reference sequence ID from column 1 could not be found in the reference
FASTA provided. Please check your input files.

=item B<start > end>

The GFF3 format (and this script) requires that the end coordinate be greater
than or equal to the start coordinate regardless of strand, and a line was
found that did not conform to this. Please check your GFF3 file.

=back

=head1 DEPENDENCIES

A recent version of perl
BioX::Seq::Fetch

=head1 BUGS AND LIMITATIONS

The GFF3 file must be sorted such that parent features come before child
features (order of child features is not important).

Please submit bug reports to the
author (see below).

=head1 AUTHOR

Jeremy Volkening (jeremy *at* base2bio.com)

=head1 LICENSE AND COPYRIGHT

Copyright 2014-2020 Jeremy Volkening
All rights reserved

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

