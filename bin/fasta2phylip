#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;
use autodie;

use BioX::Seq::Stream;
use Getopt::Long;
use Pod::Usage;

my $line_len     = 60;
my $strict_names = 0;
my $interleaved  = 0;
my $input;
my $output;

our $VERSION = 0.002;
use constant PROGRAM => 'fasta2phylip';

my $options_okay = GetOptions(
    'line_length=i' => \$line_len,
    'strict_names'  => \$strict_names,
    'interleaved'   => \$interleaved,
    'in=s'          => \$input,
    'out=s'         => \$output,
    'help'          => sub{ pod2usage(-verbose => 2, -exitval => 0); },
    'version'       => sub{ say 'This is ',PROGRAM,' v',$VERSION; exit },
);

print_usage('Syntax error: unknown option') if !$options_okay;
print_usage("Error: input file can\'t be read")
    if (defined $input && ! -r $input );

my $s = BioX::Seq::Stream->new($input);
my $fh_out = \*STDOUT;
if (defined $output) {
    open($fh_out, '>', $output) or die "Error opening file for output:$@\n"
}

my $len;
my %seqs;
my @ordered;
my %unique;
while (my $obj = $s->next_seq) {
    my $id = $obj->id;
    if ($strict_names) {
        if (length($id) > 9) {
            warn "clipping ID $id\n";
            $id = substr $id, 0, 9;
        }
        $id =~ s/\W/_/g;
        $id = sprintf '%-9s', $id;
        die "Errror: duplicate seq names ($id)\n" if (defined $unique{$id});
        $unique{$id} = 1;
    }
    push @ordered, $id;
    my $seq = $obj->seq;
    $len = length($seq) if (! defined $len);
    die "mismatch in sequence lengths" if (length($seq) != $len);
    $seqs{$id} = $seq;
}
my $s_count = scalar keys %seqs;
print {$fh_out} " $s_count $len\n";
if ($interleaved) {
    my $i = 0;
    while ($i < $len) {
        for (@ordered) {
            print {$fh_out} "$_ " if ($i == 0);
            print {$fh_out} substr($seqs{$_}, $i, $line_len), "\n";
        }
        print {$fh_out} "\n";
        $i += $line_len;
    }
}
else { #non-interleaved
    print {$fh_out} "$_ $seqs{$_}\n" for (@ordered);
}

sub print_usage {
    my $string = shift;
    pod2usage(
        -msg     => $string,
        -verbose => 1,
    );
    exit;
}

__END__

=head1 NAME

fasta2phylip - convert FASTA multiple alignments to PHYLIP format

=head1 SYNOPSIS

fasta2phylip --in <input.fa> [options]

=head1 DESCRIPTION

Converts a multiple alignment from padded FASTA format to PHYLIP format

=head1 PREREQUISITES

Requires the following non-core Perl libraries:

=over 1

=item * BioX::Seq

=back

=head1 OPTIONS

=over 4

=item B<--in> I<filename>

Path to input FASTA alignment (required)

=item B<--out> I<filename>

Path to write output file to (default: STDOUT)

=item B<--line_length> I<integer>

Line length to use for sequence wrapping

=item B<--interleaved>

Write sequences as interleaved (default: false)

=item B<--strict_names>

Enforce strict naming rules. Sequences IDs will be clipped to a maximum of
nine characters and an error will be thrown if duplicate IDs (after
clipping) are found. 

=back

=head1 CAVEATS AND BUGS

Please submit bug reports to the issue tracker in the distribution repository.

=head1 AUTHOR

Jeremy Volkening (jeremy.volkening@base2bio.com)

=head1 LICENSE AND COPYRIGHT

Copyright 2014-23 Jeremy Volkening

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

