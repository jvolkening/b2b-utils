#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;
use autodie;

use File::Basename qw/basename/;
use File::Temp;
use Getopt::Long;
use IPC::Cmd qw/can_run run/;
use List::Util qw/first max/;
use Pod::Usage qw/pod2usage/;

our $VERSION = '0.003';
use constant PROGRAM => 'uc';

my %magic = (
    pack('C3', 0x1f, 0x8b, 0x08),                    'GZIP',
    pack('C4', 0x28, 0xb5, 0x2f, 0xfd),              'ZSTD',
    pack('C4', 0x04, 0x22, 0x4d, 0x18),              'LZ4',
    pack('C6', 0xfd, 0x37, 0x7a, 0x58, 0x5a, 0x00),  'XZ',
    'LZIP',                                          'LZIP',
    'BZh',                                           'BZIP2',
    'bsc1',                                          'BSC',
);

my %bins = (
    GZIP  => [qw/pigz gzip/],
    BZIP2 => [qw/lbzip2 pbzip2 bzip2/],
    ZSTD  => [qw/zstd/],
    LZ4   => [qw/lz4/],
    LZIP  => [qw/plzip lzip/],
    XZ    => [qw/xz/],
    BSC   => [qw/bsc/],
);

my %thread_flags = (
    pigz   => 'p',
    lbzip2 => 'n',
    pbzip2 => 'p',
    zstd   => 'T',
    plzip  => 'n',
    xz     => 'T',
);

my @fn_in;
my $threads;
my $specific_bin;

GetOptions(
    'in=s'      => \@fn_in,
    'threads=i' => \$threads,
    'program=s' => \$specific_bin,
    'help'      => sub{ pod2usage(-verbose => 2, exitval => 0) },
    'version'   => sub{ say 'This is ',PROGRAM,' v', $VERSION; exit },
);

# to make the program more like zcat, etc (able to take multiple filenames as
# input arguments and output a single stream), we consume any unused
# command-line arguments as input filenames. For backward compatibility, we
# also continue to accept input filenames given using '--in'.
my @combined_inputs = (
    @ARGV,
    @fn_in
);
for (@combined_inputs) {
    die "File $_ not found or not readable"
        if (! -r $_);
}

for my $fn_in (@combined_inputs) {

    #detect filetype based on magic bytes
    open my $in, '<:raw', $fn_in;
    my $n_want = max map {length $_} keys %magic;
    my $buf;
    my $n_read = read $in, $buf, $n_want;
    die "Failed to read initial bytes"
        if ($n_read != $n_want);

    my $type_str = first {$buf =~ /^\Q$_\E/} keys %magic;
    die "Failed to detect file type"
        if (! defined $type_str);
    my $type = $magic{$type_str};

    my $BIN;
    if (defined $specific_bin) {
        $BIN = can_run($specific_bin)
            // die "Specified program not found: $specific_bin\n";
    }
    else {
        my @bins =
            grep {defined $_}
            map {can_run($_)}
            @{ $bins{$type} };
        $BIN = $bins[0]
            // die "Failed to find suitable binary to use on $type filetype";
    }

    # Set standard parameters for decompression
    my @leading_params = qw/-d -q -c/;
    my @trailing_params = ();

    # Some programs can't write directly to stdout, even using /dev/stdout
    # (presumably they need seekable access to the output). As a workaround,
    # write to temporary file and then stream that to stdout
    my $tmp_out;
    my $capture_stdout = 0;

    # BSC has non-standard syntax, so we need some shims here
    if ($type eq 'BSC') {
        @leading_params = ('d');
        $tmp_out = File::Temp->new(UNLINK => 1);
        @trailing_params = ("$tmp_out");
        $capture_stdout = 1;
    }
    my $thread_flag = $thread_flags{ basename($BIN) };
    if (defined $threads && defined $thread_flag) {
        push @leading_params, "-$thread_flag$threads";
    }

    my @cmd = (
        $BIN,
        @leading_params,
        $fn_in,
        @trailing_params,
    );

    if ($capture_stdout) {
        run(command => \@cmd)
            or die "External decompression failed: $!";
    }
    else {
        my $ret = system @cmd;
        die "External decompression failed: $!"
            if ($ret);
    }
    # for commands that write to a temporary file, now stream that file to
    # STDOUT
    if (defined $tmp_out) {

        my @cmd = (
            'cat',
            "$tmp_out"
        );
        my $ret = system @cmd;
        die "cat failed: $!"
            if ($ret);

    }

}

__END__

=head1 NAME

uc - the (sort of) universal UnCompressor

=head1 SYNOPSIS

uc --threads I<integer> I<infile1> I<infile2> ... > I<outfile>
uc --threads I<integer> --in I<infile> > I<outfile>

=head1 DESCRIPTION

B<uc> is a semi-universal front-end to various decompression programs. It
determines the type of the input file given, tries to find an appropriate
decompression program in the current PATH, and, if possible, decompresses the
file to STDOUT. The purpose is to facilitate use of heterogeneous inputs to
data analysis pipelines by providing for "universal" decompression of
compressed input data without knowing the compression format in advance.

=head1 SUPPORTED FORMATS

Currently, the following formats are supported. One or more of the binaries
listed below need to be present in the current PATH in order to support that
file type. If multiple options are available, one will be chosen
preferentially in the order listed.

=head2 GZIP

=over 2

=item pigz

=item gzip

=back

=head2 BZIP2

=over 2

=item lbzip2

=item pbzip2

=item bzip2

=back

=head2 ZSTD

=over 2

=item zstd

=back

=head2 LZ4

=over 2

=item lz4

=back

=head2 LZIP

=over 2

=item plzip

=item lzip

=back

=head2 XZ

=over 2

=item xz

=back

=head2 BSC

=over 2

=item bsc

=back

=head1 OPTIONS

=over 2

=item B<--in> I<file_path>

Path to the input file. Reading from STDIN is not supported. Any "naked"
arguments given on the command line are also assumed to be input filenames.

=item B<--threads> I<integer>

The number of threads to use for decompression. Support varies by
decompression tool. If not specified, the default for each program is
used.

=item B<--program> I<name_or_path>

Override automatic detection and explicitly specify which decompression
program to use. The argument can be either the full path to the program or the
name of a program in the current PATH. Used mainly for testing, since if you
knew the value beforehand you wouldn't be using this software.

=item B<--help>

Show documentation and exit

=item B<--version>

Print version string and exit

=back

=head1 CAVEATS AND BUGS

This software has been tested on Linux only. While it should also work on
Windows, Mac OSX, BSD, and other systems with the appropriate modules
and compression tools installed, it has not been tested on these systems. 

Please report all bugs or suggestions on the software repository issues page.

=head1 AUTHOR

Jeremy Volkening (jeremy.volkening@base2bio.com)

=head1 COPYRIGHT AND LICENSE

Copyright 2020-2023 Jeremy Volkening

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
details.

You should have received a copy of the GNU General Public License along with
this program.  If not, see L<http://www.gnu.org/licenses/>.

=cut

