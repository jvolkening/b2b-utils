#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use autodie qw/:all/;
use Cwd qw/abs_path/;
use Getopt::Long;
use Pod::Usage;
use File::Path qw/rmtree/;
use File::Temp qw/tempdir/;
use File::Which qw/which/;

my $PROGRAM = 'rm_chim';
my $VERSION = 0.003;

my $db;
my $fa;
my $reads = '-';
my $threads = 1;
my $seed = '13';
my $min_score = 20;
my $fn_out;

GetOptions(

    'fq=s'        => \$reads,
    'fa=s'        => \$fa,
    'db=s'        => \$db, 
    'threads=i'   => \$threads,
    'seed=i'      => \$seed,
    'min_score=f' => \$min_score,
    'out=s'       => \$fn_out,
    'help'              => sub{ pod2usage(-verbose => 2); },
    'version'           => sub{ print "This is $PROGRAM v$VERSION\n";exit; },

) or pod2usage( -verbose => 1 );

if (defined $fa && defined $db) {
    die "Only one of --fa or --db should be specified\n";
}
if (! defined $fa && ! defined $db) {
    die "One of --fa or --db must be specified\n";
}

my $BWA = which('bwa') // die "BWA not found. Please install or check \$PATH\n";

my $tmp_dir;
if (defined $fa) {


    $fa = abs_path $fa;
    $tmp_dir = tempdir( CLEANUP => 0 );
    $db = "$tmp_dir/ref.fa"; 
    symlink $fa => $db or die "Failed to symlink reference: $!";

    open my $stderr_old, '>&', \*STDERR;
    open STDERR, '>>', File::Spec->devnull();

    my $ret = system(
        $BWA,
        'index',
        $db,
    );

    open STDERR, '>&', $stderr_old;

    die "BWA index failed" if ($ret);


}

my $curr_orient = 0;
my $curr_read;
my $curr_id;
my $kept = 0;
my $total = 0;

my $out = \*STDOUT;
if (defined $fn_out) {
    open $out, '>', $fn_out;
}

open my $stderr_old, '>&', \*STDERR;
open STDERR, '>>', File::Spec->devnull();

open my $sam, '-|',
    $BWA,
    'mem',
    '-t' => $threads,
    '-M',
    '-C',
    '-T' => $min_score,
    '-k' => $seed,
    $db,
    $reads,
;

open STDERR, '>&', $stderr_old;

while (my $line = <$sam>) {
    next if ($line =~ /^\@/);
    chomp $line;
    my ($id, $flags, @other) = split "\t", $line;
    if (defined $curr_id && $id ne $curr_id) {
        if ($curr_orient != 0x03) {
            ++$kept;
            print {$out} $curr_read;
        }
        ++$total;
        $curr_read = undef;
        $curr_id = $id;
        $curr_orient = 0;
    }
    my $mask = $flags & 0x0010 ? 0x02 : 0x01; # 0x01 forward, 0x02 reverse
    $curr_orient = $curr_orient | $mask;

    for my $tag (@other[9..$#other]) {
        my ($code,$type,$val) = split ':', $tag;
        next if ($code ne 'XA');
        for my $hit (split ';', $val) {
            my ($chr,$pos,$cigar,$nm) = split ',', $hit;
            my $mask = $pos < 0 ? 0x02 : 0x01; # 0x01 forward, 0x02 reverse
            $curr_orient = $curr_orient | $mask;
        }
    }
    $curr_id = $id;
    my $seq  = $other[7];
    my $qual = $other[8];
    if ($flags & 0x0010) { # reversed
        $qual = reverse $qual;
        $seq  = reverse $seq;
        $seq  =~ tr/ATGCatgc/TACGtacg/;
    }
    $curr_read = "\@$id $other[-1]\n$seq\n+\n$qual\n";
            
}

close $sam;
rmtree $tmp_dir if (defined $tmp_dir);

# handle last read
if ($curr_orient != 0x03) {
    ++$kept;
    print {$out} $curr_read;
}
++$total;

my $discards = $total - $kept;
my $perc = int($discards/$total*100*10+0.5)/10;
warn "rm_chim: discarded $discards of $total ($perc\%)\n";

exit;

__END__

=head1 NAME

rm_chim - filter out chimeric reads based on alignment against a reference
sequence

=head1 SYNOPSIS

rm_chim [options] --fq I<raw_reads> --db I<BWA_database>

=head1 DESCRIPTION

B<rm_chim> aims to filter out chimeric reads that appear to be techinical
artifacts related to certain library preparation protocols. It does this by
the simplistic technique of mapping against a known reference sequence and
removing reads for which subsequences map in opposite orientations against the
genome.

B<IMPORTANT:> Do not use this filter on data where genomic inversions might be
expected to actually occur in yoru data.

=head1 OPTIONS

=head2 Mandatory

=over 4

=item B<--fq> I<fastq>

Path to raw data in FASTQ format

=item B<--db> I<bwa_prefix>

Prefix of BWA database to map against. Either this or --fa must be specified.

=item B<--fa> I<fasta>

Path to reference FASTA. Either this or --db must be specified.

=back

=head2 Optional

=over 4 

=item B<--out> I<filename>

Specify where to write passed reads to. Default: STDOUT.

=item B<--threads> I<integer>

Number of threads BWA should use. Default: 1.

=item B<--seed> I<integer>

Seed to pass to BWA (--k) (for deterministic mapping)

=item B<--min_score> I<integer>

Minimum BWA alignment score to report (--T). Default: 20.

=item B<--help>

Display this usage page

=item B<--version>

Print version information

=back

=head1 CAVEATS AND BUGS

Please submit bug reports to the issue tracker in the distribution repository.

=head1 AUTHOR

Jeremy Volkening <jdv@base2bio.com>

=head1 COPYRIGHT AND LICENSE

Copyright 2014-16 Jeremy Volkening

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
