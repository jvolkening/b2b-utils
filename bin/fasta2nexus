#!/usr/bin/env perl

use strict;
use warnings;
use 5.012;

use BioX::Seq::Stream;
use BioX::Seq::Utils qw/is_nucleic/;
use Getopt::Long;
use Pod::Usage;

my $line_len     = 60;
my $interleaved  = 0;
my $input;
my $output;
my $type;

my $PROGRAM = 'fasta2nexus';
my $VERSION = 0.001;

my $options_okay = GetOptions(

    'line_length=i' => \$line_len,
    'interleaved'   => \$interleaved,
    'type=s'        => \$type,
    'in=s'          => \$input,
    'out=s'         => \$output,
    'help'          => sub{ pod2usage(-verbose => 2); },
    'version'       => sub{ print "This is $PROGRAM v$VERSION\n";exit; },
);

print_usage('Syntax error: unknown option') if !$options_okay;
print_usage("Error: input file can\'t be read")
    if (defined $input && ! -r $input );

die "Bad sequence type: $type (must be 'dna' or 'protein')\n"
    if (defined $type && $type !~ /^(?:dna|protein)$/i);

my $s = BioX::Seq::Stream->new($input);
my $fh_out = \*STDOUT;
if (defined $output) {
    open($fh_out, '>', $output) or die "Error opening file for output:$@\n"
}

my $l_seqs;
my %seqs;
my @ordered;
my %unique;
my $max_id_len = 0;
while (my $obj = $s->next_seq) {
    my $id = $obj->id;
    $max_id_len = length($id) if (length($id) > $max_id_len);
    push @ordered, $id;
    my $seq = $obj->seq;
    $l_seqs = length($seq) if (! defined $l_seqs);
    if (! defined $type) {
        $type = is_nucleic($seq) ? 'dna' : 'protein';
    }
    die "mismatch in sequence lengths" if (length($seq) != $l_seqs);
    $seqs{$id} = $seq;
}

my $n_seqs = scalar keys %seqs;
my $il_bool = $interleaved ? 'yes' : 'no';
++$max_id_len;

# Header

print {$fh_out} "#NEXUS\n\n";

my $indent = '  ';
print {$fh_out} "begin data;\n";
print {$fh_out} "${indent}dimensions ntax=$n_seqs nchar=$l_seqs;\n";
print {$fh_out} "${indent}format datatype=$type interleave=$il_bool gap=-;\n";
print {$fh_out} "${indent}matrix\n";

if ($interleaved) {
    my $i = 0;
    while ($i < $l_seqs) {
        print {$fh_out} "\n" if ($i > 0);
        for (@ordered) {
            printf {$fh_out} "$indent%-${max_id_len}s", $_;
            print {$fh_out} substr($seqs{$_}, $i, $line_len), "\n";
        }
        $i += $line_len;
    }
}
else { #non-interleaved
    printf {$fh_out} ("$indent%-${max_id_len}s%s\n", $_, $seqs{$_}) for (@ordered);
}

# Footer
print {$fh_out} "${indent};\n";
print {$fh_out} "end;\n";

sub print_usage {
    my $string = shift;
    pod2usage(
        -msg     => $string,
        -verbose => 1,
    );
    exit;
}

__END__

=head1 NAME

fasta2nexus - convert FASTA multiple alignments to NEXUS format

=head1 SYNOPSIS

fasta2nexus --in <input.fa> [options]

=head1 DESCRIPTION

Converts a multiple alignment from padded FASTA format to NEXUS format

=head1 PREREQUISITES

Requires the following non-core Perl libraries:

=over 1

=item * BioX::Seq

=back

=head1 OPTIONS

=over 4

=item B<--in> I<filename>

Path to input FASTA alignment (required)

=item B<--out> I<filename>

Path to write output file to (default: STDOUT)

=item B<--line_length> I<integer>

Line length to use for sequence wrapping

=item B<--interleaved>

Write sequences as interleaved (default: false)

=item B<--type>

Specify sequence type (either 'dna' or 'protein'). If not given, will be
guessed from the file contents.

=back

=head1 CAVEATS AND BUGS

Please submit bug reports to the issue tracker in the distribution repository.

=head1 AUTHOR

Jeremy Volkening (jdv@base2bio.com)

=head1 LICENSE AND COPYRIGHT

Copyright 2014-17 Jeremy Volkening

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut

